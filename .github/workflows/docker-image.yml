name: Docker Image CI

on:
  push:
    branches:
    - main

  pull_request:
    branches:
    - main

  schedule:
  - cron: "0 2 * * 1-5"

  workflow_dispatch:

jobs:

  build:

    runs-on: ubuntu-latest
    env:
      COMPRESS_GZ: true
      COMPRESS_XZ: false

    steps:

    - name: Checkout
      uses: actions/checkout@v2

    - name: Build the Docker image
      run: |
        echo "------------------------"
        echo "Build stp 1: ROTD image. "
        echo "XZ-compression: ${COMPRESS_XZ}"
        echo "GZ-compression: ${COMPRESS_GZ}"
        echo "------------------------------"
        echo
        sudo apt -y install coreutils util-linux xz-utils gawk
        mkdir -p ~/.docker
        sudo service docker restart
        # download existing DATE and if there is a newer ROTD, adjust
        export url_bc=$(awk '/^bootstrap-url/ {print $2}' .config.in)
        if ! wget ${url_bc}/DATE; then
            echo "No DATE file could be downloaded."
            exit 1
        else
            export date_bc=$(cat DATE)
        fi
        echo "Using bootstrapping compiler: ${date_bc}"
        echo "Using bootstrapping URL: ${url_bc}"
        export date_latest=$(/bin/bash latest_rotd.sh)
        echo "Date of latest ROTD: ${date_latest}"
        if [[ "${date_bc}" < "${date_latest}" || "${date_bc}" == "${date_latest}" ]]
        then
            /bin/bash build_latest.sh --reuse
            [ $? != 0 ] && echo "Could not create compliant image" && exit 3
            echo ${date_latest} > DATE
            docker image ls -a
            export ID=$(docker image ls -q | head -1)
            docker run --name ubuntu4mercury ${ID}
            sudo docker cp ubuntu4mercury:/usr/local/mercury-rotd-${date_latest} /usr/local
            tar cpJvf rotd.tar.xz /usr/local/mercury-rotd-${date_latest}
            echo "Files is directory: $(ls -al)"
            mkdir ${GITHUB_WORKSPACE}/tmp_ubuntu4mercury
            cp -v DATE GIT_HEAD SUMS ubuntu4mercury.tar* rotd.tar.xz Dockerfile \
                  ${GITHUB_WORKSPACE}/tmp_ubuntu4mercury
            echo "HOME is: $HOME"
            echo "Files in current directory $PWD: $(ls -al)"
        else
            echo "No newer ROTD." && exit 2
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload artifact
      uses: actions/upload-artifact@v2.3.1
      with:
        name: ubuntu4mercury
        path: ${{ github.workspace }}/tmp_ubuntu4mercury/*
        # DATE GIT_HEAD ubuntu4mercury.tar rotd.tar.xz

  push:
    runs-on: ubuntu-latest
    needs: build

    steps:

    - name: Login to DockerHub
      uses: docker/login-action@v1
      with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Login to Github Packages
      uses: docker/login-action@v1
      with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}

    - name: Download artifact
      uses: actions/download-artifact@v2.1.0
      with:
          name: ubuntu4mercury

    - name: Check tag
      run: |
          export OLD_TAG=ubuntu:mercury$(cat GIT_HEAD)
          export NEW_TAG=fabnicol/ubuntu4mercury:$(cat DATE)-$(cat GIT_HEAD)  
          echo "OLD_TAG=${OLD_TAG}"
          echo "OLD_TAG=${OLD_TAG}" >> $GITHUB_ENV
          echo "NEW_TAG=${NEW_TAG}"
          echo "NEW_TAG=${NEW_TAG}" >> $GITHUB_ENV
         
    - name: Load image and push
      run: |
          docker load --input ubuntu4mercury.tar
          docker image ls -a
          docker tag ${{ env.OLD_TAG }} ${{ env.NEW_TAG }}
          docker push ${{ env.NEW_TAG }}

    - name: Retag
      run: |
          docker tag ${{ env.NEW_TAG }} fabnicol/ubuntu4mercury:latest
          docker push fabnicol/ubuntu4mercury:latest

  release:

    runs-on: ubuntu-latest
    needs: build

    steps:

    - name: Checkout
      uses: actions/checkout@v2

    - name: Download artifact
      uses: actions/download-artifact@v2.1.0
      with:
          name: ubuntu4mercury

    - name : Cleanup release
      uses: dev-drprasad/delete-tag-and-release@v0.2.1
      with:
        delete_release: true # default: false
        tag_name: release-master # tag name to delete
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: release-master
        release_name: Release master
        body: |
          This release was automatically created by the Git Actions workflow corresponding to directory .github in the repository.
          Released files are:
          - DATE, a file containing the date of the ROTD built within the image;
          - GIT_HEAD, a file containing the revision of the git source;
          - rotd.tar.xz, a compressed package of this ROTD;
          - ubuntu4mercury.tar.gz, a GZ-compressed package of the image;
          - SUMS, a file with checksums of the compressed image.
        draft: false
        prerelease: false
    
    - uses: xresloader/upload-to-github-release@master
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        file: "DATE;GIT_HEAD;rotd.tar.xz;ubuntu4mercury.tar.gz;SUMS"
        overwrite: true
        verbose: true
        draft: false
        prerelease: false
        tag_name: release-master
